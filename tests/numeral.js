// Node
if (typeof module !== 'undefined' && module.exports) {
    var numeral = require('../numeral');
    numeral.register('locale', 'in2', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        trillion: 1000000000,
        billion: 10000000,
        million: 100000,
        regex: /(\d)(?=(\d\d)+\d$)/g,
        abbreviations: {
            thousand: 'k',
            million: 'l',
            billion: 'cr',
            trillion: 'a'
        },
        abbreviations_detail: {
            thousand: 2,
            million: 5,
            billion: 7,
            trillion: 9
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                    (b === 2) ? 'nd' :
                        (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '\u20B9'
        }
    });
    numeral.locale('in2');

    var expect = require('chai').expect;
}

describe('Numeral', function () {
    afterEach(function () {
        numeral.reset();
    });


    describe('Format', function () {
        it('should format to a number', function () {
            // var tests = [
            //         [-5444333222111, '0,0', '-54,44,33,32,22,111']
            //     ],
            //     i,
            //     n,
            //     output;
            var tests = [
                    // [0, null, '0'],
                    // [0, '0.00', '0.00'],
                    // [null, null, '0'],
                    // [NaN, '0.0', '0.0'],
                    // [1.23,'0,0','1'],
                    // [10000,'0,0.0000','10,000.0000'],
                    // [10000.23,'0,0','10,000'],
                    // [-10000,'0,0.0','-10,000.0'],
                    // [10000.1234,'0.000','10000.123'],
                    // [10000,'0[.]00','10000'],
                    // [10000.1,'0[.]00','10000.10'],
                    // [10000.123,'0[.]00','10000.12'],
                    // [10000.456,'0[.]00','10000.46'],
                    // [10000.001,'0[.]00','10000'],
                    // [10000.45,'0[.]00[0]','10000.45'],
                    // [10000.456,'0[.]00[0]','10000.456'],
                    // [10000,'(0,0.0000)','10,000.0000'],
                    // [-10000,'(0,0.0000)','(10,000.0000)'],
                    // [-12300,'+0,0.0000','-12,300.0000'],
                    // [1230,'+0,0','+1,230'],
                    // [1230,'-0,0','1,230'],
                    // [-1230,'-0,0','-1,230'],
                    // [-1230.4,'0,0.0+','1,230.4-'],
                    // [-1230.4,'0,0.0-','1,230.4-'],
                    // [1230.4,'0,0.0-','1,230.4'],
                    // [100.78, '0', '101'],
                    // [100.28, '0', '100'],
                    // [1.932,'0.0','1.9'],
                    // [1.9687,'0','2'],
                    // [1.9687,'0.0','2.0'],
                    // [-0.23,'.00','-.23'],
                    // [-0.23,'(.00)','(.23)'],
                    // [0.23,'0.00000','0.23000'],
                    // [0.67,'0.0[0000]','0.67'],
                    // [3162.63,'0.0[00000000000000]','3162.63'],
                    // [1.99,'0.[0]','2'],
                    // [1.0501,'0.00[0]','1.05'],
                    // [1.005,'0.00','1.01'],
                    // // leading zero
                    // [0, '00.0', '00.0'],
                    // [0.23, '000.[00]', '000.23'],
                    // [4, '000', '004'],
                    // [10, '00000', '00010'],
                    // [1000, '000,0', '1,000'],
                    // [1000, '00000,0', '01,000'],
                    // [1000, '0000000,0', '00,01,000'],
                    // // // // abbreviations
                    // [2000000000,'0.0a','2.0a'],
                    // [1230974,'0.0a','12.3l'],
                    // [1460,'0a','1k'],
                    // [-104000,'0 a','-1 l'],
                    // [999950,'0.0a','10.0l'],
                    // [999999999,'0a','1b'],
                    // // // forced abbreviations
                    // [-5444333222111, '0,0 ak', '-5,44,43,33,222 k'],
                    // [5444333222111, '0,0 am', '54,44,333 m'],
                    // [545000, '0.000 a', '5.450 l'],
                    [545000, '0,000', '5,45,000'],
                    // [-5444333222111, '0,0 ab', '-5,444 b'],
                    // [-5444333222111, '0,0 at', '-5 t'],
                    // [123456, '0.0[0] ak', '123.46 k'],
                    // [150,'0.0 ak','0.2 k']
                ],
                i,
                n,
                output;

            for (i = 0; i < tests.length; i++) {
                n = numeral(tests[i][0]);
                output = n.format(tests[i][1]);
                console.log(output)
                expect(output).to.equal(tests[i][2]);

                expect(typeof output).to.equal('string');
            }
        });
    });

});
